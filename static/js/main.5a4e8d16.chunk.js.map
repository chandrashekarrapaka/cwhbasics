{"version":3,"sources":["components/TextForm.js","components/About.js","components/Navbar.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["TextForm","props","useState","text","setText","className","htmlFor","id","rows","value","onChange","event","console","log","target","onClick","newtext","toUpperCase","document","getElementById","innerText","showAlert","setTimeout","toLowerCase","length","split","match","About","color","backgroundColor","mystyle","setMyStyle","btn","setBtn","style","type","Navbar","mode","href","title","to","class","toggleHandler","role","myStyle","for","Alert","alert","msg","App","setMode","setAlert","message","body","background","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5a4e8d16.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    let newtext = \"\";\r\n    // let sectionToCheck = \"$%klds$\";\r\n\r\n\r\n    const conUpCase = () => {\r\n        console.log(\"clicked on\" + text);\r\n        let newtext = text.toUpperCase();\r\n        setText(newtext);\r\n        document.getElementById(\"tar\").innerText = newtext;\r\n        props.showAlert(\"Upper case button clicked\", \"success\");\r\n        setTimeout(() => {\r\n            props.showAlert(null);\r\n        }, 2000);\r\n\r\n    }\r\n    const conLowCase = () => {\r\n        console.log(\"clicked on\" + text);\r\n        let newtext = text.toLowerCase();\r\n        setText(newtext);\r\n        document.getElementById(\"tar\").innerText = newtext;\r\n\r\n    }\r\n    const onChange = (event) => {\r\n        console.log(\"onChange\");\r\n        setText(event.target.value)\r\n    }\r\n    const [text, setText] = useState('Enter your text');\r\n    return (\r\n\r\n        <div className=\"mb-3 container\">\r\n            <h2>Give ur text</h2>\r\n            <label htmlFor=\"myText\" className=\"form-label\">Type your text to analyze</label>\r\n            <textarea className=\"form-control\" id=\"myText\" rows=\"3\" value={text} onChange={onChange}></textarea>\r\n            <div className=\"my-3 container\">\r\n                <button className=\"btn btn-primary mx-2\" onClick={conUpCase}>Convert to Upper case</button>\r\n                <button className=\"btn btn-primary\" onClick={conLowCase}>Convert to Lower case</button>\r\n\r\n            </div>\r\n            <div className=\"container my-3\">\r\n                Value of text converted is\r\n                <h1 id=\"tar\"></h1>\r\n                <h3>Text Summary:</h3>\r\n                {text.length > 0 &&\r\n                    <>\r\n                        <p>you need {text.split(\" \").length * 0.008} minutes to read this sentence</p>\r\n                        <p>Number of Symbols:{text.match(/[@#$%^&*()_+\\-=\\[\\]{ };':\"\\\\|,.<>\\/?!]/g).length}</p>\r\n                    </>\r\n                }\r\n\r\n\r\n\r\n\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from 'react'\r\nimport TextForm from './TextForm';\r\n\r\nexport default function About() {\r\n\r\n    const [mystyle, setMyStyle] = useState({\r\n        color: 'white',\r\n        backgroundColor: 'black'\r\n    })\r\n    const [btn, setBtn] = useState(\"Enable Light Mode\");\r\n    const togglemode = () => {\r\n        if (mystyle.color == \"white\") {\r\n            setMyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white'\r\n            })\r\n            setBtn(\"Enable Dark Mode\");\r\n        }\r\n        else {\r\n            setMyStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black'\r\n            })\r\n            setBtn(\"Enable light Mode\");\r\n        }\r\n    }\r\n    return (\r\n        <div style={mystyle}>\r\n            <div className=\"accordion container my-3\" style={mystyle} id=\"accordionExample\">\r\n                <b>About Us</b>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse \" style={mystyle} aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={mystyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={mystyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\" style={mystyle} >\r\n                        <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" style={mystyle} aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={mystyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={mystyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\" style={mystyle}>\r\n                        <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" style={mystyle} aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={mystyle}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"container my-3\">\r\n                    <button type=\"button\" style={mystyle} onClick={togglemode} className=\"btn btn-dark\">{btn}</button>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div >\r\n    )\r\n}\r\n","import React from 'react'\r\nimport propTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n                            </li>\r\n\r\n\r\n                        </ul>\r\n                        {/* <form className=\"d-flex\">\r\n                            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                        </form> */}\r\n                        <div class=\"form-check form-switch\">\r\n                            <input class=\"form-check-input\" onClick={props.toggleHandler} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                            <label class=\"form-check-label\" style={props.myStyle} for=\"flexSwitchCheckDefault\">{props.mode} mode</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\nNavbar.propTypes = { title: propTypes.string.isRequired }","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n        props.alert &&\r\n        <div className={`alert alert-${props.alert.type}`} role=\"alert\">\r\n            <strong>{props.alert.type}</strong>:{props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [myStyle, setMyStyle] = useState({\n    color: 'black',\n    // backgroundColor: 'black'\n  })\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({ msg: message, type: type });\n\n  }\n  const toggleHandler = () => {\n\n    // setAlert('this is alert');\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n    showAlert(\"toggle is clicked\", \"success\");\n\n    console.log(\"toggle\");\n    if (mode == 'light') {\n      setMode('dark');\n      document.body.style.background = \"gray\";\n      setMyStyle({\n        color: 'white',\n        // backgroundColor: 'white'\n      })\n    } else {\n      setMode('light');\n      document.body.style.background = \"white\";\n      setMyStyle({\n        color: 'black',\n        // backgroundColor: 'black'\n      })\n    }\n  }\n\n  return (\n    <>\n      <Router>\n        <Navbar mode={mode} toggleHandler={toggleHandler} title={\"textUtilities\"} myStyle={myStyle} />\n        <Alert alert={alert} />\n        <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\">\n            <TextForm showAlert={showAlert}></TextForm>\n          </Route>\n        </Switch>\n      </Router>\n    </>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}